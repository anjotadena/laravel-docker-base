version: 2

# See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
jobs:
  build:
    docker:
      - image: cimg/php:8.1.27-browsers

    working_directory: ~/project/src

    steps:
      - checkout:
          path: ~/project

      - run: 
          name: "Prepare Environment"
          command: |
            sudo apt update
            sudo docker-php-ext-install zip pdo pdo_mysql bcmath

      # Client specific steps     
      - restore_cache: # special step to restore the dependency cache if `package-lock.json` does not change
          keys:
            - node-v1-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
            - node-v1-
      - run:
          name: "Frontend Install Dependencies"
          command: npm install

      - save_cache: # special step to save the dependency cache with the `package-lock.json` cache key template
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      - run:
          name: "Build frontend"
          command: npm run build
      
      # Backend specific steps
      - run:
          name: "Create Environment File"
          command: |
            mv .env.testing .env

       - restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
          keys:
            - composer-v1-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
            - composer-v1-
    
      - run:
          name: "API Install Dependencies"
          command: composer install -n --prefer-dist

      - save_cache: # special step to save the dependency cache with the `composer.lock` cache key template
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      - run:
          name: "Generate app key"
          command: php artisan key:generate

      - run:
          name: "Run testing"
          command: ./vendor/bin/phpunit

  deploy:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy over SSH
          command: |
            ssh -o StrictHostKeyChecking=no docker@laravel-base.com 'cd /home/docker/site && git fetch origin master && git reset --hard origin/main && git pulll origin main && docker-compose -f docker-compose.prod.yml up -d --build nginx'

workflows:
  version: 2
  build-deploy:
    jobs:
      - build

